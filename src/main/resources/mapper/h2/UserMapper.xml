<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <!--UserMapperRepositoryとxmlのマッピング-->
<mapper namespace="com.example.repository.UserMapperRepository">

<!--マッピング定義（ユーザー）-->
<resultMap type="com.example.domainUser.model.UserMapperEntity" id="user">
	<id column="login_id" property="loginId" />
	<result column="password" property="password" />
	<result column="user_name" property="userName" />
	<result column="user_name_kana" property="userNamekana" />
	<result column="mail_address" property="mailAddress" />
	<result column="department_id" property="departmentId" />
	<result column="role_id" property="roleId" />
	<result column="validation" property="validation" />
	<result column="hire_date" property="hire" />
	<result column="authority_flg" property="authorityFlg" />
	<result column="work_flg" property="workFlg" />
    <association property="department" resultMap="department" />
    <association property="role" resultMap="role" />
    <association property="paid" resultMap="paid" />
    <collection property="paidAppList" resultMap="paidApp" columnPrefix="paidApp_" />
</resultMap>

<!--マッピング定義（部署）-->
<resultMap type="com.example.domainUser.model.DepartmentEntity" id="department">
   <id column="department_id" property="departmentId" />
   <result column="department_name" property="departmentName" />
</resultMap>

<!--マッピング定義（役職）-->
<resultMap type="com.example.domainUser.model.RoleEntity" id="role">
   <id column="role_id" property="roleId" />
   <result column="role_name" property="roleName" />
</resultMap>

	<!--マッピング定義（有給申請テーブル）-->
<resultMap type="com.example.domainUser.model.PaidAppEntity" id="paidApp">
	<id column="login_id" property="paidLoginId" />
	<result column="user_name" property="paidUserName" />
	<result column="paid_requestdate_app" property="paidRequestDateApp" />
	<result column="paid_date_app" property="paidDateApp" />
	<result column="paid_app_id" property="paidAppId" />
	<result column="request_sta_id" property="requestStaId" />
	<result column="paid_app_reason" property="paidAppReason" />
</resultMap>

<!--マッピング定義（有給テーブル）-->
<resultMap type="com.example.domainUser.model.PaidEntity" id="paid">
   <id column="paid_id" property="paidId" />
   <result column="login_id" property="loginId" />
   <result column="paid_date_num" property="paidDateNum" />
   <result column="paid_last_granted_date" property="paidLastGrantedDate" />
   <result column="hire_date" property="hire" />
</resultMap>


<!--ユーザー1件登録-->
<insert id="insertOne">
	 insert into m_user(
	  login_id
	 ,password
	 ,user_name
	 ,user_name_kana
	 ,mail_address
     ,department_id
	 ,role_id
	 ,validation
	 ,hire_date
	 ,authority_flg
	 ,work_flg
	 )
	 values(
	 #{loginId}
	,#{password}
	,#{userName}
	,#{userNamekana}
	,#{mailAddress}
	,#{departmentId}
	,#{roleId}
	,#{validation}
	,#{hire}
	,#{authorityFlg}
	,10
	)
</insert>

<!--有給テーブルに1件登録-->
<insert id="insertUserPaidCreate">
insert into m_paid(login_id, hire_date) values(#{loginId}, #{hire});
</insert>

<!--ユーザー複数件取得-->
<select id="findMany" resultType="UserMapperEntity">
SELECT * FROM m_user
WHERE
    (IFNULL(login_id, '') = '' OR login_id LIKE CONCAT('%',#{loginId}, '%'))
    AND
    (IFNULL(user_name, '') = '' OR user_name LIKE CONCAT('%',#{userName}, '%'));
</select>

<!--部署複数件取得-->
<select id="findAll" resultType="DepartmentEntity">
	select * from m_department
</select>

<!--役職複数件取得-->
<select id="findAll2" resultType="RoleEntity">
	select * from m_role
</select>


<!--ユーザー１件検索-->
<select id="findOne" resultMap="user">
	select 
	 login_id
	,user_name
	,user_name_kana
	,mail_address
	,m_user.department_id
	,m_user.role_id
	,validation
	,hire_date
	,authority_flg 
	from m_user 
	left join m_department on m_user.department_id = m_department.department_id 
	left join m_role on m_user.role_id = m_role.role_id 
	where login_id = #{loginId}
</select>

<!--ユーザー１件検索：パスワードあり-->
<select id="findUserOne" resultMap="user">
	select 
	 login_id
	,password
	,user_name
	,user_name_kana
	,mail_address
	,m_user.department_id
	,m_user.role_id
	,validation
	,hire_date
	,authority_flg 
	from m_user 
	left join m_department on m_user.department_id = m_department.department_id 
	left join m_role on m_user.role_id = m_role.role_id 
	where login_id = #{loginId}
</select>


<!--ログインユーザー１件検索-->
<select id="getLoginUser" resultMap="user">
	select * from m_user where login_id = #{loginId}
</select>


<!--有給申請１件検索-->
<select id="paidRequestFindOne" resultMap="user">
	select 
	 m_user.login_id
	,m_user.user_name
	,m_user.user_name_kana
	,m_paid_app.login_id as paidApp_login_id
	,m_paid_app.user_name as paidApp_user_name
	,m_paid_app.paid_requestdate_app
	,m_paid_app.paid_date_app
	,m_paid_app.paid_app_id
	,m_paid_app.request_sta_id
	,m_paid_app.paid_app_reason 
	from 
	m_user  
	left join m_paid_app on m_user.login_id = m_paid_app.login_id  
	where 
	m_user.login_id = #{loginId}
</select>


<!--ユーザー１件更新-->
<update id="updateOne">
	update m_user set 
	login_id =#{loginId},
	user_name =#{userName},
	user_name_kana =#{userNamekana},
	mail_address =#{mailAddress},
	department_id =#{departmentId},
	role_id =#{roleId},
	validation =#{validation},
	authority_flg =#{authority},
	hire_date =#{hire},
    password=#{encryptPassword} 
	where 
	login_id = #{loginId}
</update>

<!--ログインユーザーパスワード更新-->
<update id="updatePasswordOne">
	update m_user 
	set password = #{encryptPassword} 
	where 
	login_id = #{loginId};
</update>



<!--ユーザー１件削除-->
<delete id="deleteOne">
	delete from m_user 
	where 
	login_id =#{loginId}
</delete>

<!--出退勤フラグの取得-->
<select id="findWorkFlg" resultMap="user">
    select 
     work_flg 
    from 
     m_user 
    where 
     login_id = #{loginId}
</select>

<!--出退勤フラグの更新（退勤ボタンを活性化）-->
<update id="updateWorkFlgLeaving">
	update m_user set 
	work_flg =20 
	where 
	login_id = #{loginId}
</update>

<!--出退勤フラグの更新（出勤ボタンを活性化）-->
<update id="updateWorkFlgAttendance">
	update m_user set 
	work_flg =10 
	where 
	login_id = #{loginId}
</update>

<!--月毎の総稼働時間をトータルテーブルに格納-->
<insert id="insertTotal">
INSERT INTO monthly_totals (month, total_hours)
SELECT DATE_FORMAT(work_date, '%Y-%m'), SUM(hours_worked)
FROM work_hours
GROUP BY DATE_FORMAT(work_date, '%Y-%m')
</insert>

<!--初回の従業員への有給付与処理-->	
<update id="giveFirstPaidDays">
  UPDATE m_paid 
  SET 
  paid_date_num = 10,
  paid_last_granted_days = 10,
  paid_last_granted_date =  
    CASE 
      WHEN paid_last_granted_date IS NULL THEN DATE_ADD(hire_date, INTERVAL 6 MONTH) 
      ELSE paid_last_granted_date 
    END 
  WHERE 
  hire_date &lt;= DATE_SUB(NOW(), INTERVAL 6 MONTH) 
  AND paid_last_granted_date IS NULL;
</update>

<!--次回以降の従業員への有給付与処理-->
<update id="updateGivePaidDays">
  UPDATE m_paid 
  SET 
  paid_date_num = paid_date_num + LEAST(paid_last_granted_days + 1, 20), 
  paid_last_granted_days = paid_last_granted_days + 1,
  paid_last_granted_date = DATE_ADD(paid_last_granted_date, INTERVAL 1 YEAR)  
  WHERE 
  paid_last_granted_date &lt;= DATE_SUB(NOW(), INTERVAL 1 YEAR)  
  AND paid_last_granted_date IS NOT NULL;
</update>

<select id="getPaidDays" resultMap="paid">
  select  paid_date_num 
  from m_paid 
  where login_id = #{loginId}
</select>



 </mapper>